#!/usr/bin/env bash

VERSION="0.0.1"

# Config values
WOFI_PASS_DEBUG="${WOFI_PASS_DEBUG:-0}"
WOFI_PASS_AUTOTYPE="${WOFI_PASS_AUTOTYPE:-":username :tab :password :enter"}"
WOFI_PASS_HOTKEY_COPY="${WOFI_PASS_HOTKEY_COPY:-"Alt-w"}"
WOFI_PASS_HOTKEY_COPY_RET=10
WOFI_PASS_DELAY=${WOFI_PASS_DELAY:-2}
WOFI_PASS_AUTO_ENTER="${WOFI_PASS_AUTO_ENTER:-"false"}"
WOFI_PASS_ARGS=("--dmenu" "--parse-search")
WOFI_PASS_HIDE_FIELDS=("path")
WOFI_PASS_CASE_INSENSITIVE=1

FLAG_HELP=0
FLAG_VERSION=0
FLAG_HOTKEYS_SUPPORTED=1

FIELD_OTP_TAG="<<--OTP-->>"

SEARCH_PATTERN=""
declare -A ENTRY_CACHE

debug_log() {
    if [[ "$WOFI_PASS_DEBUG" -eq 1 ]]; then
        echo "DEBUG: [${FUNCNAME[1]}] $*" >&2
    fi
}

exit_on_help_or_version() {
    if [[ "${FLAG_HELP}" -eq 1 ]]; then
        usage >&2
        exit 0
    elif [[ "${FLAG_VERSION}" -eq 1  ]]; then
        echo "${VERSION}" >&2
        exit 0
    fi
}

usage() {
    cat <<EOF
    Usage:
    wofi-pass [options] [match]

    Options:
        -h, --help        show this help message
        -v, --version     show version
        -k, --nohotkey    Disable hotkey support. By default hotkeys are supported.

    wofi-pass version ${VERSION}
EOF
}

arguments_parse() {
    OPTS="$(getopt --options hvk --longoptions help,version,nohotkey -n 'wofi-pass' -- "${@}")"
    eval set -- "${OPTS}"
    while true; do
        case "${1}" in
            -h | --help) FLAG_HELP=1; shift;;
            -v | --version) FLAG_VERSION=1; shift;;
            -k | --nohotkey) FLAG_HOTKEYS_SUPPORTED=0; shift;;
            --) shift; break;;
            *) break;;
      esac
    done
    SEARCH_PATTERN="$*"
}

config_file_get() {
  local config_dir
  local -a candidate_files

  config_dir="${XDG_CONFIG_HOME:-"$HOME/.config"}"

  if [[ -n "${WOFI_PASS_CONFIG:-}" ]]; then
    candidate_files+=("$WOFI_PASS_CONFIG")
  fi

  candidate_files+=("$config_dir/wofi-pass/config")
  candidate_files+=("/etc/wofi-pass.conf")

  for cfg in "${candidate_files[@]}"; do
    if [[ -n "$cfg" && -r "$cfg" ]]; then
      printf '%s' "$cfg"
      return 0
    fi
  done
}

config_file_load () {
    config_file="$(config_file_get)"
    if [[ -n "${config_file}" ]]; then
        # shellcheck source=/dev/null
        source "${config_file}"
    fi
}

_trim() {
    local var
    var="${*}"

    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"

    printf '%s' "${var}"
}

fields_parse() {
    local -r passname="$1"
    local -a entries
    local entry key value

    # Read password entry content
    mapfile -t entries < <(pass show "${passname}")

    # Process each line of the password entry
    for index in "${!entries[@]}"; do
        entry="${entries[index]}"

        case $entry in
            # First line password (non-key:value format)
            *:*)
                # Process normally in next cases
                ;;
            *)
                if (( index == 0 )); then
                    ENTRY_CACHE["password"]="$entry"
                    debug_log "Password at index[0]: 'ENTRY_CACHE[password]=${entry}'"
                    continue
                fi
                ;;
        esac

        # Parse different entry types
        case $entry in
            *": "*)
                # Key-value pairs
                key=$(_trim "${entry%%: *}")
                value=$(_trim "${entry#*: }")

                if [[ -n "${value}" ]]; then
                    ENTRY_CACHE["${key}"]="${value}"
                    [[ "${key}" == "password" ]] && debug_log "Overriding ${key}: '${value}'"
                fi
                ;;

            *"otpauth://"*)
                # OTP entries
                ENTRY_CACHE["${FIELD_OTP_TAG}"]="${entry}"
                debug_log "OTP at index[${index}]: '${FIELD_OTP_TAG}=${entry}'"
                ;;

            *)
                # Invalid/unrecognized format
                debug_log "Invalid key or value at index[${index}]: '${entry}'"
                ;;
        esac
    done

    # Set mandatory fields
    ENTRY_CACHE["path"]="${passname}"
    ENTRY_CACHE["autotype"]="${ENTRY_CACHE[autotype]:-$WOFI_PASS_AUTOTYPE}"

    # Default username from filename
    if [[ -z "${ENTRY_CACHE[username]+x}" ]]; then
        ENTRY_CACHE["username"]=$(basename "${passname}")
        debug_log "Set default ENTRY_CACHE[username]: '${ENTRY_CACHE["username"]}'"
    fi
}

field_get() {
    # Prepare wofi arguments and visible fields
    local -a wofi_args=("${WOFI_PASS_ARGS[@]}")
    local -A visible_fields hidden_fields
    local field num_fields wofi_ret

    # Add hotkey support if enabled
    if (( FLAG_HOTKEYS_SUPPORTED )) && [[ -n "$WOFI_PASS_HOTKEY_COPY" ]]; then
        wofi_args+=(--define "key_custom_0=$WOFI_PASS_HOTKEY_COPY")
    fi

    # Create lookup hash for hidden fields
    for item in "${WOFI_PASS_HIDE_FIELDS[@]}"; do
        hidden_fields["$item"]=1
    done

    # Filter visible fields
    for field in "${!ENTRY_CACHE[@]}"; do
        [[ ! -v hidden_fields["$field"] ]] && visible_fields["$field"]=1
    done

    # Configure wofi display height
    num_fields=$(( ${#visible_fields[@]} ))
    if (( num_fields > 0 && num_fields <= 13 )); then
        ((num_fields++))
        wofi_args+=(--lines "$num_fields")
    fi

    # Show selection dialog
    field=$(printf '%s\n' "${!visible_fields[@]}" | wofi "${wofi_args[@]}")
    wofi_ret=$?

    # Log debugging information
    debug_log "wofi_selected: ${field}"
    debug_log "wofi_args: ${wofi_args[*]}"
    debug_log "wofi_ret: ${wofi_ret}"

    printf '%s' "$field"
    return $wofi_ret
}

field_output() {
    local -r field="${1}"
    local -r hotkey="${2:-0}"
    local -a cmd
    local otp_value

    debug_log "FIELD: ${field}"
    debug_log "HOTKEY: ${hotkey}"

    # Determine output command based on hotkey
    case "${hotkey}" in
        0)   cmd=(wtype) ;;
        10)  cmd=(wl-copy) ;;
        *)   debug_log "Unknown hotkey: ${hotkey}"; return 1 ;;
    esac

    case "${field}" in
        "autotype")
            autotype_output
            return $?
            ;;

        "${FIELD_OTP_TAG}")
            # Get OTP value safely
            otp_value=$(pass otp "${ENTRY_CACHE[path]}" | head -n1)
            if [[ -n "${otp_value}" ]]; then
                "${cmd[@]}" "${otp_value}"
            else
                debug_log "Failed to get OTP value"
                return 1
            fi
            ;;

        *)
            # Handle regular field output
            if [[ -v ENTRY_CACHE["${field}"] ]]; then
                "${cmd[@]}" "${ENTRY_CACHE[${field}]}"
            else
                debug_log "Missing field in cache: ${field}"
                return 1
            fi
            ;;
    esac
}

autotype_output() {
    local -a wtype_args
    local word special_value
    local -r path="${ENTRY_CACHE[path]}"

    # Split autotype string while preserving quoted strings
    IFS=' ' read -ra words <<< "${ENTRY_CACHE[autotype]}"

    for word in "${words[@]}"; do
        case "${word}" in
            ":tab")
                wtype_args+=("-k" "Tab")
                debug_log "Autotype: Tab key"
                ;;
            ":space")
                wtype_args+=("-k" "space")
                debug_log "Autotype: Space key"
                ;;
            ":enter")
                wtype_args+=("-k" "Return")
                debug_log "Autotype: Enter key"
                ;;
            ":delay")
                wtype_args+=("-s" "$((WOFI_PASS_DELAY * 1000))")
                debug_log "Autotype: Delay ${WOFI_PASS_DELAY}s"
                ;;
            ":otp")
                special_value=$(pass otp "${path}" | head -n1)
                if [[ -n "${special_value}" ]]; then
                    wtype_args+=("${special_value}")
                    debug_log "Autotype: OTP value"
                else
                    debug_log "Autotype: Failed to get OTP value"
                    return 1
                fi
                ;;
            ":password"|"pass")
                wtype_args+=("${ENTRY_CACHE[password]}")
                debug_log "Autotype: Password field"
                ;;
            ":username"|"user"|"uname")
                wtype_args+=("${ENTRY_CACHE[username]}")
                debug_log "Autotype: Username field"
                ;;
            ":path")
                wtype_args+=("${path}")
                debug_log "Autotype: Path field"
                ;;
            *)
                if [[ -v ENTRY_CACHE["${word}"] ]]; then
                    wtype_args+=("${ENTRY_CACHE[${word}]}")
                    debug_log "Autotype: Field '${word}'"
                else
                    debug_log "Autotype: Unknown keyword '${word}'"
                    return 1
                fi
                ;;
        esac
    done

    # Execute the composed wtype command
    if [[ "${#wtype_args[@]}" -gt 0 ]]; then
        debug_log "Executing wtype with arguments: ${wtype_args[*]}"
        wtype "${wtype_args[@]}"
    else
        debug_log "No autotype arguments generated"
        return 1
    fi
}

passname_select() {
    local -r pass_dir="${PASSWORD_STORE_DIR}"
    local -a wofi_args
    local all_files password_files passname line_count

    # Generate list of password entries
    all_files=$(find "${pass_dir}" -name '*.gpg' -printf '%P\n' | sed 's/\.gpg$//')

    # Filter and sort entries
    password_files=$(
        if [[ -n "${SEARCH_PATTERN}" ]]; then
            grep -iF "${SEARCH_PATTERN}" <<< "${all_files}"
        else
            echo "${all_files}"
        fi | sort
    )

    # Fallback to all files if search returns nothing
    if [[ -z "${password_files}" ]]; then
        password_files=$(echo "${all_files}" | sort)
    fi

    # Configure wofi display lines
    wofi_args=("${WOFI_PASS_ARGS[@]}")
    line_count=$(wc -l <<< "${password_files}")
    if (( line_count > 0 && line_count <= 13 )); then
        ((line_count++))
        wofi_args+=(--lines "${line_count}")
    fi

    # Add case insensitivity if configured
    [[ "${WOFI_PASS_CASE_INSENSITIVE}" -eq 1 ]] && wofi_args+=(--insensitive)

    # Select entry with wofi
    passname=$(wofi "${wofi_args[@]}" <<< "${password_files}")

    debug_log "wofi_selected: ${passname}"
    debug_log "wofi_args: ${wofi_args[*]}"

    printf '%s' "${passname}"
}

main() {
    local passname field hotkey ret

    config_file_load
    arguments_parse "${@}"
    exit_on_help_or_version

    passname="$(passname_select)"
    [[ -n "${passname}" ]] || exit 1

    fields_parse "${passname}"

    ret=0
    field=$(field_get) || ret="${?}"

    if [[ "${ret}" -eq 0 ]] || [[ "${ret}" -eq "${WOFI_PASS_HOTKEY_COPY_RET}" ]]; then
        hotkey="${ret}"
    else
        exit 1
    fi

    field_output "${field}" "${hotkey}"

    if [[ "$WOFI_PASS_DEBUG" -eq 1 ]]; then
        debug_log "SEARCH_PATTERN: '${SEARCH_PATTERN}'"
        debug_log "Selected: '${passname}'"
        debug_log "<-= ENTRY_CACHE[@] =->"
        for key in "${!ENTRY_CACHE[@]}"; do
            debug_log "${key}: '${ENTRY_CACHE[$key]}'"
        done
        debug_log "<-= ENTRY_CACHE[@] =->"
    fi
}

main "${@}"
